/*  Student information for assignment:
*
*  On my honor, Rodrigo Okamoto Corbellini Pereira, 
*  this programming assignment is my own work
*  and I have not provided this code to any other student.
*
*  Name: Rodrigo Okamoto Corbellini Pereira
*  email address: rodrigoocp@utexas.edu
*  UTEID: ro7929
*  TA name: Irena
*  Number of slip days used on this assignment: 0
*/

//Experiment results. CS314 students, place your experiment
//results here:
/**
 * 1)
 * Num Repeats: 100
 * Adding at end: ArrayList
 * N = 30000, total time:  0.1138
 * N = 60000, total time:  0.1680
 * N = 120000, total time:  0.3597
 * N = 240000, total time:  0.4080
 * N = 480000, total time:  1.5995
 * 
 * 
 * Num Repeats: 100
 * Adding at end: LinkedList
 * N = 30000, total time:  0.0430
 * N = 60000, total time:  0.0841
 * N = 120000, total time:  0.2570
 * N = 240000, total time:  0.4170
 * N = 480000, total time:  0.8553
 * 
 * 
 * 2)
 * Num Repeats: 100
 * Adding at front: ArrayList
 * N = 2000, total time:  0.0197
 * N = 4000, total time:  0.0615
 * N = 8000, total time:  0.2233
 * N = 16000, total time:  1.0108
 * N = 32000, total time:  4.1044
 * 
 * 
 * Num Repeats: 100
 * Adding at front: LinkedList
 * N = 10000, total time:  0.0093
 * N = 20000, total time:  0.0174
 * N = 40000, total time:  0.0361
 * N = 80000, total time:  0.0702
 * N = 160000, total time:  0.1373
 * 
 * 
 * 3)
 * Num Repeats: 100
 * Removing from front: ArrayList
 * N = 2000, total time:  0.0180
 * N = 4000, total time:  0.0547
 * N = 8000, total time:  0.2083
 * N = 16000, total time:  0.9560
 * N = 32000, total time:  4.0443
 * 
 * 
 * Num Repeats: 100
 * removing from front: LinkedList
 * N = 5000, total time:  0.0105
 * N = 10000, total time:  0.0269
 * N = 20000, total time:  0.0605
 * N = 40000, total time:  0.1237
 * N = 80000, total time:  0.2516
 * 
 * 
 * 4)
 * Num Repeats: 100
 * Getting random: ArrayList
 * N = 10000, total time:  0.0182
 * N = 20000, total time:  0.0393
 * N = 40000, total time:  0.0969
 * N = 80000, total time:  0.2490
 * N = 160000, total time:  0.6081
 * 
 * 
 * Num Repeats: 100
 * Getting random: LinkedList
 * N = 1000, total time:  0.1132
 * N = 2000, total time:  0.4517
 * N = 4000, total time:  1.8269
 * N = 8000, total time:  7.4272
 * N = 16000, total time: 30.9252
 * 
 * 
 * 5)
 * Num Repeats: 100
 * Getting all using iterator: ArrayList
 * N = 50000, total time:  0.0149
 * N = 100000, total time:  0.0260
 * N = 200000, total time:  0.0389
 * N = 400000, total time:  0.0819
 * N = 800000, total time:  0.1441
 * 
 * 
 * Num Repeats: 100
 * Getting all using iterator: LinkedList
 * N = 50000, total time:  0.0194
 * N = 100000, total time:  0.0366
 * N = 200000, total time:  0.0754
 * N = 400000, total time:  0.1477
 * N = 800000, total time:  0.2916
 * 
 * 
 * 6)
 * Num Repeats: 100
 * Getting all using get method: ArrayList
 * N = 100000, total time:  0.0154
 * N = 200000, total time:  0.0282
 * N = 400000, total time:  0.0563
 * N = 800000, total time:  0.1132
 * N = 1600000, total time:  0.2134
 * 
 * 
 * Num Repeats: 100
 * Getting all using get method: LinkedList
 * N = 1000, total time:  0.1011
 * N = 2000, total time:  0.4298
 * N = 4000, total time:  1.7487
 * N = 8000, total time:  7.2023
 * N = 16000, total time: 30.6518
 */
//1) Adding to end appears to be almost twice as fast on a LinkedList for most
//sizes of N.
//LinkedList appears to have a Big O of O(1) for adding to the end
//since the timing was increasing by only a factor of 2 caused by the loop that 
//calls the addLast() method N times while the method its self caused no  
//increase in time.
//ArrayList appears to have a Big O of O(N) because of resizing as shown in the
//4x increase in time from .4080 to 1.5995 when N is doubled from N = 240000 
//to N = 480000. This 4x increase is caused by the experiment loop running 
//the ArrayList .add() method of O(N) N times.
//
//2) Adding at front appears to be faster on a LinkedList because adding to the
//front was faster even when adding 5x more elements than in the ArrayList
//LinkedList appears to have a Big O of O(1) for adding to the front since the
//timing was increasing by only a factor of 2 caused by the loop that 
//calls the addFirst() method N times while the method its self caused no  
//increase in time.
//ArrayList appears to have a Big O of O(N) because of shifting as shown in the
//about 4x increase in time every time N was doubled. This 4x increase is caused
//by the experiment loop running the ArrayList .add(0,j) method of O(N) N times.
//
//3) Removing from front appears to be faster on a LinkedList because it was
//faster than an ArrayList while adding more than 2x the elements.
//LinkedList appears to have a Big O of O(1) for removing from the end since
//the timing doubled every time N was douled which was caused by the loop in 
//the experiment calling removeFirst() N times while the method itself worked
//in constant time.
//ArrayList appears to have a Big O of O(N) because of shifting after removing
//as shown by the 4x increase in the times every time N was doubled. This 4x
//increase was caused by the experiment calling the remove(0), an O(N) method,
//N times.
//
//4) Getting random appeared to be faster for ArrayList since it got data faster
//while doing 10x the size of N that LinkedList did.
//LinkedList appeared to have a Big O of O(N) because of the 4x increase in
//timing every time N was doubled. This 4x increase was caused by the experiment
//calling the O(N) method of .get() N times.
//ArrayList appeared to have a Big O of O(1) because the timing only doubled
//every time N was double which was caused by the experiment calling the 
//.get() method N.
//
//5) Getting all using iterator appeared to take around the same amount of time
//for both ArrayList and LinkedList for the same values of N.
//ArrayList and LinkedList appeared to have a Big O of O(1) for their iterator
//next() methods and an Big O of O(N) for getting all since their timings 
//increased by 2 every time N was doubled.
//
//6) Getting all using get method appeared to be faster for ArrayList since it 
//was faster at getting all for values of N 100x greater than LinkeList used.
//LinkedList appeared to have a Big O of O(N) for its get() method and a Big O
//of O(N^2) for getting all since its timings increased by a factor of 4 every
//time N was doubled.
//ArrayList appeared to have a Big O of O(1) for its get() method and a Big O of
//O(N) for getting all since its timings doubled every time N was doubled.

import java.util.Iterator;
import java.util.ArrayList;
import java.util.Random;
import java.util.Arrays;

public class LinkedListTester {

   public static void main(String[] args) {

       //CS314 students. Add your tests here:
       String[] expectedArr;
       String[] initialList;
       LinkedList<String> testList;
       
       //Testing toString()
       System.out.println();
       System.out.println("----------------Testing toString()----------------");

       //toString 1
       expectedArr = new String[] {};
       testList = makeList(expectedArr);
       runTest("toString()", testList, expectedArr);

       //toString 2
       expectedArr = new String[] {"A"};
       testList = makeList(expectedArr);
       runTest("toString()", testList, expectedArr);

       //toString 3
       expectedArr = new String[] {"A", "B", "C", "D", "e", "f"};
       testList = makeList(expectedArr);
       runTest("toString()", testList, expectedArr);

       //Testing add()
       System.out.println();
       System.out.println("------------------Testing add()-------------------");

       //Add 1
       expectedArr = new String[] {"A","b","C"};
       testList = makeList(expectedArr);
       runTest("add()", testList, expectedArr);

       //Add 2
       expectedArr = new String[] {"1"};
       testList = makeList(expectedArr);
       runTest("add()", testList, expectedArr);

       //Add 3
       expectedArr = new String[] {"h","e","l","l","o","world"};
       testList = makeList(expectedArr);
       runTest("add()", testList, expectedArr);

       //testing addFirst()
       System.out.println();
       System.out.println("---------------Testing addFirst()-----------------");

       //addFirst 1
       initialList = new String[] {};
       expectedArr = new String[] {"b"};
       testList = makeList(initialList);
       testList.addFirst("b");
       runTest("addFirst()", testList, expectedArr);

       //addFirst 2
       initialList = new String[] {"c"};
       expectedArr = new String[] {"b","c"};
       testList = makeList(initialList);
       testList.addFirst("b");
       runTest("addFirst()", testList, expectedArr);

       //addFirst 3
       initialList = new String[] {"a","fda","fdeaefd","ae"};
       expectedArr = new String[] {"a","a","fda","fdeaefd","ae"};
       testList = makeList(initialList);
       testList.addFirst("a");
       runTest("addFirst()", testList, expectedArr);

       //testing addLast()
       System.out.println();
       System.out.println("---------------Testing addLast()------------------");

       //addLast 1
       initialList = new String[] {};
       expectedArr = new String[] {"b"};
       testList = makeList(initialList);
       testList.addLast("b");
       runTest("addLast()", testList, expectedArr);

       //addLast 2
       initialList = new String[] {"b","c"};
       expectedArr = new String[] {"b","c","b"};
       testList = makeList(initialList);
       testList.addLast("b");
       runTest("addLast()", testList, expectedArr);

       //addLast 3
       initialList = new String[] {"b","c","b","c"};
       expectedArr = new String[] {"b","c","b","c","b"};
       testList = makeList(initialList);
       testList.addLast("b");
       runTest("addLast()", testList, expectedArr);

       //testing insert()
       System.out.println();
       System.out.println("----------------Testing insert()------------------");

       //insert 1
       initialList = new String[] {"a","fda","fdeaefd","ae"};
       expectedArr = new String[] {"a","a","fda","fdeaefd","ae"};
       testList = makeList(initialList);
       testList.insert(0,"a");
       runTest("insert()", testList, expectedArr);

       //insert 2
       initialList = new String[] {"a","fda","fdeaefd","ae"};
       expectedArr = new String[] {"a","fda","fdeaefd","ae","a"};
       testList = makeList(initialList);
       testList.insert(initialList.length,"a");
       runTest("insert()", testList, expectedArr);

       //insert 3
       initialList = new String[] {"a","fda","fdeaefd","ae"};
       expectedArr = new String[] {"a","fda","a","fdeaefd","ae"};
       testList = makeList(initialList);
       testList.insert(initialList.length/2,"a");
       runTest("insert()", testList, expectedArr);

       //testing set()
       System.out.println();
       System.out.println("------------------Testing set()-------------------");

       //set 1
       initialList = new String[] {"b","fds","as"};
       expectedArr = new String[] {"a","fds","as"};
       testList = makeList(initialList);
       testList.set(0,"a");
       runTest("set()", testList, expectedArr);

       //set 2
       initialList = new String[] {"1","2","3"};
       expectedArr = new String[] {"1","2","10"};
       testList = makeList(initialList);
       testList.set(initialList.length - 1,"10");
       runTest("set()", testList, expectedArr);

       //set 3
       initialList = new String[] {"1","2","4"};
       expectedArr = new String[] {"1","3","4"};
       testList = makeList(initialList);
       testList.set(initialList.length/2,"3");
       runTest("set()", testList, expectedArr);

       //testing get()
       System.out.println();
       System.out.println("------------------Testing get()-------------------");

       //get 1
       initialList = new String[] {"a"};
       testList = makeList(initialList);
       runTest("get()", testList.get(0), "a");

       //get 2
       initialList = new String[] {"a","b","c","d"};
       testList = makeList(initialList);
       runTest("get()", testList.get(initialList.length - 1), "d");

       //get 3
       initialList = new String[] {"a","b","c","d"};
       testList = makeList(initialList);
       runTest("get()", testList.get(initialList.length/2), "c");

       //testing remove(index)
       System.out.println();
       System.out.println("--------------Testing remove(index)---------------");

       //remove 1
       initialList = new String[] {"1"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.remove(0);
       runTest("remove(index)", testList, expectedArr);

       //remove 2
       initialList = new String[] {"1","2","3","4","5"};
       expectedArr = new String[] {"1","2","3","4"};
       testList = makeList(initialList);
       testList.remove(initialList.length - 1);
       runTest("remove(index)", testList, expectedArr);

       //remove 3
       initialList = new String[] {"1","2","3","4","5"};
       expectedArr = new String[] {"1","2","4","5"};
       testList = makeList(initialList);
       testList.remove(initialList.length/2);
       runTest("remove(index)", testList, expectedArr);

       //testing remove(obj)
       System.out.println();
       System.out.println("---------------Testing remove(obj)----------------");

       //remove 1
       initialList = new String[] {"1","2","1"};
       expectedArr = new String[] {"2","1"};
       testList = makeList(initialList);
       testList.remove("1");
       runTest("remove(index)", testList, expectedArr);

       //remove 2
       initialList = new String[] {"1","2","1"};
       expectedArr = new String[] {"1","1"};
       testList = makeList(initialList);
       testList.remove("2");
       runTest("remove(index)", testList, expectedArr);

       //remove 3
       initialList = new String[] {"3"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.remove("3");
       runTest("remove(index)", testList, expectedArr);

       //testing removeFirst()
       System.out.println();
       System.out.println("--------------Testing removeFirst()---------------");

       //remove 1
       initialList = new String[] {"1","2","1"};
       expectedArr = new String[] {"2","1"};
       testList = makeList(initialList);
       testList.removeFirst();
       runTest("removeFirst()", testList, expectedArr);

       //remove 2
       initialList = new String[] {"1"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.removeFirst();
       runTest("removeFirst()", testList, expectedArr);

       //remove 3
       initialList = new String[] {"a","B","C","d"};
       expectedArr = new String[] {"B","C","d"};
       testList = makeList(initialList);
       testList.removeFirst();
       runTest("removeFirst()", testList, expectedArr);


       //testing removeLast()
       System.out.println();
       System.out.println("--------------Testing removeLast()----------------");

       //remove 1
       initialList = new String[] {"d"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.removeLast();
       runTest("removeLast()", testList, expectedArr);

       //remove 2
       initialList = new String[] {"a","d","c","f"};
       expectedArr = new String[] {"a","d","c"};
       testList = makeList(initialList);
       testList.removeLast();
       runTest("removeLast()", testList, expectedArr);

       //remove 3
       initialList = new String[] {"a","f"};
       expectedArr = new String[] {"a"};
       testList = makeList(initialList);
       testList.removeLast();
       runTest("removeLast()", testList, expectedArr);

       //testing getSubList()
       System.out.println();
       System.out.println("--------------Testing getSubList()----------------");

       //subList 1
       initialList = new String[] {"a"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList = (LinkedList<String>) testList.getSubList(0, 0);
       runTest("getSubList()", testList, expectedArr);

       //subList 2
       initialList = new String[] {"a","b","c","d"};
       expectedArr = new String[] {"b"};
       testList = makeList(initialList);
       testList = (LinkedList<String>) testList.getSubList(1, 2);
       runTest("getSubList()", testList, expectedArr);

       //subList 3
       initialList = new String[] {"a","b","c","d","e","f"};
       expectedArr = new String[] {"c","d","e","f"};
       testList = makeList(initialList);
       testList = 
            (LinkedList<String>) testList.getSubList(2, initialList.length);
       runTest("getSubList()", testList, expectedArr);

       //testing size()
       System.out.println();
       System.out.println("-----------------Testing size()-------------------");

       //size 1
       initialList = new String[] {};
       testList = makeList(initialList);
       runTest("size()", testList.size(), initialList.length);

       //size 2
       initialList = new String[] {"a","b"};
       testList = makeList(initialList);
       runTest("size()", testList.size(), initialList.length);

       //size 3
       initialList = new String[] {"a","b","c","d","e","f","g"};
       testList = makeList(initialList);
       runTest("size()", testList.size(), initialList.length);

       //testing indexOf(item)
       System.out.println();
       System.out.println("--------------Testing indexOf(item)---------------");

       //indexOf 1
       initialList = new String[] {};
       testList = makeList(initialList);
       runTest("indexOf(item)", testList.indexOf("a"), -1);

       //indexOf 2
       initialList = new String[] {"a","b","a"};
       testList = makeList(initialList);
       runTest("indexOf(item)", testList.indexOf("a"), 0);

       //indexOf 3
       initialList = new String[] {"a","b","a","c","d","e"};
       testList = makeList(initialList);
       runTest("indexOf(item)", testList.indexOf("e"), initialList.length - 1);

       //testing indexOf(item, pos)
       System.out.println();
       System.out.println("------------Testing indexOf(item, pos)------------");

       //indexOf 1
       initialList = new String[] {"a"};
       testList = makeList(initialList);
       runTest("indexOf(item, pos)", testList.indexOf("a",0), 0);

       //indexOf 2
       initialList = new String[] {"a","b","c","d"};
       testList = makeList(initialList);
       runTest("indexOf(item, pos)", testList.indexOf("a",1), -1);

       //indexOf 3
       initialList = new String[] {"a","b","c","d","a"};
       testList = makeList(initialList);
       runTest("indexOf(item, pos)", testList.indexOf("a",1), 
            initialList.length - 1);

        //testing makeEmtpy()
       System.out.println();
       System.out.println("---------------Testing makeEmpty()----------------");

       //makeEmpty 1
       initialList = new String[] {};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.makeEmpty();
       runTest("makeEmpty()", testList, expectedArr);

       //makeEmpty 2
       initialList = new String[] {"a","b","c"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.makeEmpty();
       runTest("makeEmpty()", testList, expectedArr);

       //makeEmpty 3
       initialList = new String[] {"a"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.makeEmpty();
       runTest("makeEmpty()", testList, expectedArr);

       //testing removeRange()
       System.out.println();
       System.out.println("--------------Testing removeRange()---------------");

       //removeRange() 1
       initialList = new String[] {"a","b","c"};
       expectedArr = new String[] {"a","b","c"};
       testList = makeList(initialList);
       testList.removeRange(2, 2);
       runTest("removeRange()", testList, expectedArr);

       //removeRange() 2
       initialList = new String[] {"a","b","c"};
       expectedArr = new String[] {"b","c"};
       testList = makeList(initialList);
       testList.removeRange(0, 1);
       runTest("removeRange()", testList, expectedArr);

       //removeRange() 3
       initialList = new String[] {"a","b","c"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       testList.removeRange(0, initialList.length);
       runTest("removeRange()", testList, expectedArr);

       //testing equals()
       System.out.println();
       System.out.println("----------------Testing equals()------------------");

       //equals 1
       initialList = new String[] {};
       testList = makeList(initialList);
       LinkedList<String> testList2 = makeList(initialList);
       runTest("equals()", testList.equals(testList2));

       //equals 2
       initialList = new String[] {};
       testList = makeList(initialList);
       testList2 = makeList(initialList);
       testList2.add("a");
       runTest("equals()", !testList.equals(testList2));

       //equals 2
       initialList = new String[] {};
       testList = makeList(initialList);
       LinkedList<Integer> testList3 = new LinkedList<>();
       runTest("equals()", testList.equals(testList3));

       //testing iterator()
       System.out.println();
       System.out.println("---------------Testing Iterator()-----------------");

       //iterator 1
       runTest("iterator()", testList.iterator() != null);

       //iterator 2
       testList = new LinkedList<>();
       runTest("iterator()", testList.iterator() != null);

       //iterator 3
       testList = new LinkedList<>();
       testList.add("a");
       runTest("iterator()", testList.iterator() != null);

       System.out.println();
       System.out.println("*****************ITERATOR METHODS*****************");

       //testing hasNext()
       System.out.println();
       System.out.println("----------------Testing hasNext()-----------------");

       //hasNext 1
       initialList = new String[] {};
       testList = makeList(initialList);
       Iterator<String> it = testList.iterator();
       runTest("hasNext()", !it.hasNext());

       //hasNext 2
       initialList = new String[] {"a","b"};
       testList = makeList(initialList);
       it = testList.iterator();
       runTest("hasNext()", it.hasNext());

       //hasNext 3
       initialList = new String[] {"a","b","c"};
       testList = makeList(initialList);
       it = testList.iterator();
       it.next();
       it.next();
       runTest("hasNext()", it.hasNext());

       //testing next()
       System.out.println();
       System.out.println("-----------------Testing next()-------------------");

       //next 1
       initialList = new String[] {"a"};
       testList = makeList(initialList);
       it = testList.iterator();
       runTest("next()", it.next(), initialList[0]);

       //next 2
       initialList = new String[] {"a","b"};
       testList = makeList(initialList);
       it = testList.iterator();
       it.next();
       runTest("next()", it.next(), initialList[1]);

       //next 2
       initialList = new String[] {"a","b","c","d","e"};
       testList = makeList(initialList);
       it = testList.iterator();
       it.next();
       it.next();
       it.next();
       runTest("next()", it.next(), "d");

       //testing remove()
       System.out.println();
       System.out.println("----------------Testing remove()------------------");

       //remove()
       initialList = new String[] {"a"};
       expectedArr = new String[] {};
       testList = makeList(initialList);
       it = testList.iterator();
       it.next();
       it.remove();
       runTest("remove()", testList, expectedArr);

       //remove()
       initialList = new String[] {"a","b"};
       expectedArr = new String[] {"a"};
       testList = makeList(initialList);
       it = testList.iterator();
       it.next();
       it.next();
       it.remove();
       runTest("remove()", testList, expectedArr);

       //remove()
       initialList = new String[] {"a","b","c"};
       expectedArr = new String[] {"a","c"};
       testList = makeList(initialList);
       it = testList.iterator();
       it.next();
       it.next();
       it.remove();
       runTest("remove()", testList, expectedArr);

       System.out.println("\nTests passed: " + testsPassed + "/" 
            + (testNum - 1));

       // CS314 Students:
       // uncomment the following line to run tests comparing
       // your LinkedList class to the java ArrayList class.
       //comparison();
   }

    private static LinkedList<String> makeList(String...str){
       LinkedList<String> newList = new LinkedList<>();
        for(String s : str){
            newList.add(s);
        }
        return newList;
   }

    private static int testNum = 1;
    private static int testsPassed = 0;
    private static void runTest(String methodName, LinkedList<String> testList
            , String[] expectedArr){
        String listString = testList.toString();
        String expectedString = Arrays.toString(expectedArr);
       if(listString.equals(expectedString)){
           System.out.print("[PASSED] ");
           System.out.println("Test " + testNum + ": " + methodName);
           testsPassed++;
       }else{
           System.out.print("[**FAILED**] ");
           System.out.println("Test " + testNum + ": " + methodName);
           System.out.println("Expected: " + expectedString);
           System.out.println("Actual: " + listString);
       }

       testNum++;       
   }

    private static void runTest(String methodName, String listString,
            String expectedString){
       if(listString.equals(expectedString)){
           System.out.print("[PASSED] ");
           System.out.println("Test " + testNum + ": " + methodName);
           testsPassed++;
       }else{
           System.out.print("[**FAILED**] ");
           System.out.println("Test " + testNum + ": " + methodName);
           System.out.println("Expected: " + expectedString);
           System.out.println("Actual: " + listString);
       }

       testNum++;       
   }

   private static void runTest(String methodName, int listInt,
            int expectedInt){
       if(listInt == expectedInt){
           System.out.print("[PASSED] ");
           System.out.println("Test " + testNum + ": " + methodName);
           testsPassed++;
       }else{
           System.out.print("[**FAILED**] ");
           System.out.println("Test " + testNum + ": " + methodName);
           System.out.println("Expected: " + expectedInt);
           System.out.println("Actual: " + listInt);
       }

       testNum++;       
   }

   private static void runTest(String methodName, boolean result){
       if(result){
           System.out.print("[PASSED] ");
           System.out.println("Test " + testNum + ": " + methodName);
           testsPassed++;
       }else{
           System.out.print("[**FAILED**] ");
           System.out.println("Test " + testNum + ": " + methodName);
       }

       testNum++;       
   }
   
   private static Object[] toArray(LinkedList<String> list) {
       Object[] result = new Object[list.size()];
       Iterator<String> it = list.iterator();
       int index = 0;
       while (it.hasNext()){
           result[index] = it.next();
           index++;
       }
       return result;
   }

   //pre: none
   private static boolean arraysSame(Object[] one, Object[] two)  {
       boolean same;
       if (one == null || two == null) {
           same = (one == two);
       } else {
           //neither one or two are null
           assert one != null && two != null;
           same = one.length == two.length;
           if (same) {
               int index = 0;
               while (index < one.length && same) {
                   same = (one[index].equals(two[index]));
                   index++;
               }
           }
       }
       return same;
   }


   private static final int NUM_DOUBLINGS_OF_N = 5;
   private static final int NUM_REPEATS_OF_TEST = 100;

   // A method to be run to compare your LinkedList class
   // and the Java ArrayList class.
   public static void comparison() {
       Stopwatch s = new Stopwatch();

       int initialN = 30000;
       addEndArrayList(s, initialN, NUM_DOUBLINGS_OF_N);
       addEndLinkedList(s, initialN, NUM_DOUBLINGS_OF_N);

       initialN = 2000;
       addFrontArrayList(s, initialN, NUM_DOUBLINGS_OF_N);
       initialN = 10000;
       addFrontLinkedList(s, initialN, NUM_DOUBLINGS_OF_N);

       initialN = 2000;
       removeFrontArrayList(s, initialN, NUM_DOUBLINGS_OF_N);
       initialN = 5000;
       removeFrontLinkedList(s, initialN, NUM_DOUBLINGS_OF_N);

       initialN = 10000;
       getRandomArrayList(s, initialN, NUM_DOUBLINGS_OF_N);
       initialN = 1000;
       getRandomLinkedList(s, initialN, NUM_DOUBLINGS_OF_N);

       initialN = 50000;
       getAllArrayListUsingIterator(s, initialN, NUM_DOUBLINGS_OF_N);
       getAllLinkedListUsingIterator(s, initialN, NUM_DOUBLINGS_OF_N);

       initialN = 100000;
       getAllArrayListUsingGetMethod(s, initialN, NUM_DOUBLINGS_OF_N);
       initialN = 1000;
       getAllLinkedListUsingGetMethod(s, initialN, NUM_DOUBLINGS_OF_N);

   }

   // These pairs of method illustrate a failure to use polymorphism.
   // If the students had implemented the Java list interface there
   // could be a single method. Also we could use function objects to
   // reduce the awful repetition of code.
   public static void addEndArrayList(Stopwatch s, int initialN,
           int numTests) {

       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               ArrayList<Integer> javaList = new ArrayList<>();
               s.start();
               for (int j = 0; j < n; j++) {
                   javaList.add(j);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Adding at end: ArrayList", totalTimes, initialN);
   }

   private static void showResults(String title, double[] times,
           int initialN) {
       System.out.println();
       System.out.println("Num Repeats: " + NUM_REPEATS_OF_TEST);
       System.out.println(title);
       for (double time : times) {
           System.out.print("N = " + initialN + ", total time: ");
           System.out.printf("%7.4f\n", time);
           initialN *= 2;
       }
       System.out.println();
   }

   public static void addEndLinkedList(Stopwatch s, int initialN,
           int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               LinkedList<Integer> studentList = new LinkedList<>();
               s.start();
               for (int j = 0; j < n; j++) {
                   studentList.add(j);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Adding at end: LinkedList", totalTimes, initialN);
   }

   public static void addFrontArrayList(Stopwatch s, int initialN,
           int numTests){

       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               ArrayList<Integer> javaList = new ArrayList<>();
               s.start();
               for (int j = 0; j < n; j++) {
                   javaList.add(0, j);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Adding at front: ArrayList", totalTimes, initialN);
   }

   public static void addFrontLinkedList(Stopwatch s, int initialN,
           int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               LinkedList<Integer> studentList = new LinkedList<>();
               s.start();
               for (int j = 0; j < n; j++) {
                   studentList.insert(0, j);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Adding at front: LinkedList", totalTimes, initialN);
   }

   public static void removeFrontArrayList(Stopwatch s, int initialN,
           int numTests){
       double[] totalTimes = new double[numTests];
       for(int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               ArrayList<String> javaList = new ArrayList<>();
               for (int j = 0; j < n; j++) {
                   javaList.add(j + "");
               }
               s.start();
               while (!javaList.isEmpty()) {
                   javaList.remove(0);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Removing from front: ArrayList", totalTimes, initialN);
   }

   public static void removeFrontLinkedList(Stopwatch s, int initialN,
           int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               LinkedList<String> studentList = new LinkedList<>();
               for (int j = 0; j < n; j++) {
                   studentList.add(j + "");
               }
               s.start();
               while (studentList.size() != 0) {
                   studentList.removeFirst();
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("removing from front: LinkedList", totalTimes, initialN);
   }

   public static void getRandomArrayList(Stopwatch s, int initialN,
           int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           int total = 0;
           Random r = new Random();
           for (int i = 0; i < numTests; i++) {
               ArrayList<Integer> javaList = new ArrayList<>();
               for (int j = 0; j < n; j++) {
                   javaList.add(j);
               }
               s.start();
               for (int j = 0; j < n; j++) {
                   total += javaList.get(r.nextInt(javaList.size()));
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Getting random: ArrayList", totalTimes, initialN);
   }

   public static void getRandomLinkedList(Stopwatch s, int initialN,
           int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           int total = 0;
           Random r = new Random();
           for (int i = 0; i < numTests; i++) {
               LinkedList<Integer> studentList = new LinkedList< >();
               for (int j = 0; j < n; j++) {
                   studentList.add(j);
               }
               s.start();
               for (int j = 0; j < n; j++) {
                   total += studentList.get(r.nextInt(studentList.size()));
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Getting random: LinkedList", totalTimes, initialN);
   }

   public static void getAllArrayListUsingIterator(Stopwatch s,
           int initialN, int numTests){

       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           int total = 0;
           for (int i = 0; i < numTests; i++) {
               ArrayList<Integer> javaList = new ArrayList<>();
               for (int j = 0; j < n; j++) {
                   javaList.add(j);
               }
               Iterator<Integer> it = javaList.iterator();
               s.start();
               while (it.hasNext()) {
                   total += it.next();
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Getting all using iterator: ArrayList", totalTimes,
               initialN);
   }

   public static void getAllLinkedListUsingIterator(Stopwatch s,
           int initialN, int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           int total = 0;
           for (int i = 0; i < numTests; i++) {
               LinkedList<Integer> studentList = new LinkedList<>();
               for (int j = 0; j < n; j++) {
                   studentList.add(j);
               }
               Iterator<Integer> it = studentList.iterator();
               s.start();
               while (it.hasNext()) {
                   total += it.next();
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Getting all using iterator: LinkedList", totalTimes,
               initialN);
   }

   public static void getAllArrayListUsingGetMethod(Stopwatch s,
           int initialN, int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               ArrayList<Integer> javaList = new ArrayList<>();
               for (int j = 0; j < n; j++) {
                   javaList.add(j);
               }
               s.start();
               int x = 0;
               for (int j = 0; j < javaList.size(); j++) {
                   x += javaList.get(j);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Getting all using get method: ArrayList", totalTimes,
               initialN);
   }

   public static void getAllLinkedListUsingGetMethod(Stopwatch s,
           int initialN, int numTests){
       double[] totalTimes = new double[numTests];
       for (int t = 0; t < NUM_REPEATS_OF_TEST; t++) {
           int n = initialN;
           for (int i = 0; i < numTests; i++) {
               LinkedList<Integer> studentList = new LinkedList<>();
               for (int j = 0; j < n; j++) {
                   studentList.add(j);
               }
               s.start();
               int x = 0;
               for (int j = 0; j < studentList.size(); j++) {
                   x += studentList.get(j);
               }
               s.stop();
               totalTimes[i] += s.time();
               n *= 2;
           }
       }
       showResults("Getting all using get method: LinkedList",
               totalTimes, initialN);
   }

   // for future changes
   private static interface ArrayListOp {
       public <E> void op(ArrayList<E> list, E data);
   }

   private ArrayListOp addAL = new ArrayListOp() {
       public <E> void op(ArrayList<E> list, E data) {
           list.add(data);
       }
   };

   private ArrayListOp addFrontAL = new ArrayListOp() {
       public <E> void op(ArrayList<E> list, E data) {
           list.add(0, data);
       }
   };

   private ArrayListOp removeFrontAL = new ArrayListOp() {
       public <E> void op(ArrayList<E> list, E data) {
           list.remove(0);
       }
   };

   private static interface LinkedListOp<E> {
       public void op(LinkedList<E> list);
   }

}
