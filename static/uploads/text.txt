import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

    /*
        This is a community sourced tester file for CS314 Assignment 1, written
        by David Bauducco.

        The following people contributed to the file:
        - Aly Abdulatiff
        - Lauren Kim
        - Raquel Moreno
        - Akram B

        If you would like to make contributions, contact David at either
        option below:
            Discord: iBeam#8060
            Email: dbauducco@utexas.edu


       Disclaimer:
       This code is provided as-is and comes with no guarantees of accurateness
       or completeness. This is also not an accurate representation of what tests
       might be ran against your code to grade it.

     */

public class CodeCampCommunityTester {


    // OPTIONS + SET UP --------------------------------------------------------

    // Set to true to see only the summary, partly overridden by smartOutput.
    static boolean summaryOnly = true;

    // Set to true to see full outputs of expected, actual results, and time only
    // when a test fails
    static boolean smartOutput = true;

    // Set to true to see full outputs of expected, actual results and time
    // Otherwise, keep to false for a shorter concise output.
    // ** Overrides smart and summaryOnly modes.
    static boolean fullOutput = true;

    public static void main(String[] args) {

        /*
            Comment out any tests that you are not interested in running.
         */

        // Tests for hammingDistance()
        testHammingDistance();

        // Test for isPermutation()
        testPermutation();

        // Test for mostVowels()
        testMostVowels();

        // Test for sharedBirthdays()
        testSharedBirthdays();

        // Test for queensAreSafe()
        testQueensAreSafe();

        // Test for mostValuablePlot()
        testMostValuablePlot();

        // Print Summary Page
        printSummaryPage();

    }


    // Test Code ---------------------------------------------------------------


    public static void testHammingDistance() {


        // Setup
        resetTestRun();
        int[] dataOne = {};
        int[] dataTwo = {};
        int expectedResult = 0;
        System.out.println(newline + "********* HAMMING TESTS *********" + newline);

        // Test 1
        dataOne = new int[] { 1, 2, 3, 4, 5, 4, 3, 2, 1 };
        dataTwo = new int[] { 1, 6, 3, 6, 5, 6, 3, 6, 1 };
        expectedResult = 4;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 2
        dataOne = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        dataTwo = new int[] { 0, 0, 0, 0, 11, 11, 11, 12, 12, 12 };
        expectedResult = 10;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 3
        dataOne = new int[] { 1, 2, 3, 4, 5, 4, 3, 2, 1 };
        dataTwo = new int[] { 1, 2, 10, 4, 5, 4, 3, -10, 1 };
        expectedResult = 2;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 4
        dataOne = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        dataTwo = new int[] { -6, -6, -6, -6, -6, -6, -6, -6, -6, -6 };
        expectedResult = 10;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 5
        dataOne = new int[500000];
        dataTwo = new int[500000];
        expectedResult = 0;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 6
        dataOne = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        dataTwo = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        expectedResult = 0;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 7
        dataOne = new int[] { };
        dataTwo = new int[] { };
        expectedResult = 0;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 8
        dataOne = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        dataTwo = new int[] { -100000, -100000, -100000, -100000, -100000, -100000,
                -100000, -100000, -100000, -100000};
        expectedResult = 10;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 9
        dataOne = new int[] { 8, 56, 4, 2, 67, 5, 9, 10, 18, 8 };
        dataTwo = new int[] { 56, 8, 4, 2, 67, 7, 9, 9, 18, 8 };
        expectedResult = 4;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 10
        dataOne = new int[] { 5, 7, 3, 5, 9, 11 };
        dataTwo = new int[] { 5, 7, 2, 5, 9, 11};
        expectedResult = 1;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 11
        dataOne = new int[] { -1, -2, -3, -4, -5, -6, -7, -8, -9 };
        dataTwo = new int[] { -9, -8, -7, -6, -5, -4, -3, -2, -1 };
        expectedResult = 8;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Test 12
        dataOne = new int[] { 1, 2, 4, 8, 16 };
        dataTwo = new int[] { 1, 2, 3, 4, 5 };
        expectedResult = 3;
        runHammingTest(dataOne, dataTwo, expectedResult);

        // Add to Summary
        addToSummary("hammingDistance()");

    }

    public static void testPermutation() {


        // Setup
        resetTestRun();
        int[] dataOne = {};
        int[] dataTwo = {};
        boolean expectedResult = false;
        System.out.println(newline + "********* PERMUTATION TESTS *********" + newline);

        // Test 1
        dataOne = new int[] { 1, 2, 3, 3, 4, 4, 5, 5 };
        dataTwo = new int[] { 5, 2, 1, 3, 4, 3, 4, 5 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 2
        dataOne = new int[] { 6, 4, 2 };
        dataTwo = new int[] { 2, 1, 3 };
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 3
        dataOne = new int[] { 2, 1, 3, 5 };
        dataTwo = new int[] { 2, 1, 3, 4 };
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 4
        dataOne = new int[] { 1, 2, 3 };
        dataTwo = new int[] { 2, 1, 3 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 5
        dataOne = new int[] { 1, 2, 3 };
        dataTwo = new int[] { 2, 1, 3, 3 };
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 6
        dataOne = new int[] { Integer.MAX_VALUE, Integer.MIN_VALUE, 0, 100000, Integer.MAX_VALUE / 2 };
        dataTwo = new int[] { 100000, Integer.MAX_VALUE, Integer.MAX_VALUE / 2, 0, Integer.MIN_VALUE };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 7
        dataOne = new int[] { -180997325, 1320698025, 888999820, -829322186, -1307183500, 1361152474,
                -1392440054, -214873900, -1855376901, -1960300168, -1953730082, 425360258,
                1058753183, -677178196, 1984530148, -1942949307, -1635374961, 343505368, 95408596,
                858251297, -1364562317, -582163733, -1883628785, -1285527161, -997097776, 675098870,
                1137740700, -855636981, 889189296, 1637018879, -349690004, -1168073383, -1612354431,
                -2088449515, -1121376283, 2124922217, -815737283, -1660242780, 1619131037,
                1081153522, 1073648075, -956169462, -274405274, -2029240037, 1380457636, -16016534,
                1992992906, -325813896, 487792570, 751182527, 846488663, 1076151604, 1182271636,
                1972603187, -334762275, 1222230665, -46755651, 1178240944, 1189688565, 796259192,
                -1747921057, 1168761527, -17815162, -795578698, -670306006, -231963023, -479546877,
                -677303323, -753986951, -2017800189, 1626756919, -225616125, -431441993, 470194214,
                1553317444, -760637657, 1909682175, -1868246283, -462279192, 527864937, -1333121534,
                512809225, 1088005122, 1205405986, 2123776813, 762490306, 1841971028, -64243115,
                524249355, -707602713, 857997706, -2089897108, -1402438425, -1661232783, 1806052731,
                1988722982, 1135202741, -2064601181, -1855076946, 1367451599 };
        dataTwo = new int[] { -17815162, 762490306, 524249355, -2064601181, -670306006, -1285527161,
                2123776813, 1619131037, -2029240037, -2017800189, 527864937, 1073648075,
                -1942949307, 857997706, 796259192, -431441993, 1909682175, -956169462, 751182527,
                -1168073383, -462279192, -760637657, -334762275, -582163733, -1635374961,
                -1612354431, 1168761527, -1953730082, -479546877, -2088449515, -677303323,
                -1660242780, -677178196, -64243115, 1361152474, 1076151604, 675098870, -815737283,
                -180997325, 1135202741, 1222230665, -1121376283, 1189688565, 512809225, -349690004,
                1553317444, 1972603187, -1307183500, 1182271636, -46755651, -1883628785,
                -1661232783, -829322186, 1984530148, 1626756919, 889189296, -855636981, 1992992906,
                1137740700, -1960300168, 1806052731, 343505368, 1367451599, -1402438425, 1178240944,
                -231963023, -795578698, -2089897108, 95408596, 1205405986, -1855376901, 470194214,
                -997097776, -1364562317, 888999820, -325813896, 1637018879, -1855076946, 1081153522,
                1320698025, -16016534, -274405274, 487792570, -1392440054, 1841971028, -1747921057,
                1058753183, 1380457636, 858251297, -214873900, -225616125, 425360258, 1088005122,
                -707602713, 2124922217, -1868246283, -1333121534, 1988722982, 846488663,
                -753986951 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 8
        dataOne = new int[1000];
        dataTwo = new int[1000];
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 9
        dataOne = new int[1000];
        dataTwo = new int[1001];
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 10
        dataOne = new int[10000];
        dataTwo = new int[10000];
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 11
        dataOne = new int[] { 2, 2, 2, 3, 3 };
        dataTwo = new int[] { 0, -2, 0, 0, 14 };
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 12
        dataOne = new int[] { 492, 607, 776, 789 };
        dataTwo = new int[] { 607, 776, 492, 789 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 13
        dataOne = new int[] { 10, -11, 12, -13, };
        dataTwo = new int[] { -13, 12, -11, 10 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 14
        dataOne = new int[] { 6, 8, 2, 5};
        dataTwo = new int[] { 2, 6, 5, 8 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 15
        dataOne = new int[157];
        dataTwo = new int[159];
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 16
        dataOne = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        dataTwo = new int[] {2, 5, 8, 3, 1, 9, 7, 0, 4, 6};
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 17
        dataOne = new int[] { 1 };
        dataTwo = new int[] { 1 };
        expectedResult = true;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 18
        dataOne = new int[1234];
        dataTwo = new int[4321];
        expectedResult = false;
        runPermutationTest(dataOne, dataTwo, expectedResult);

        // Test 19
        final int NUM_ELEMENTS = 10000;
        ArrayList<Integer> temp = new ArrayList<>(NUM_ELEMENTS);
        Random r = new Random();
        for (int i = 0; i < NUM_ELEMENTS; i++) {
            temp.add(r.nextInt());
        }

        dataOne = temp.stream().mapToInt(i -> i).toArray();
        Collections.shuffle(temp);
        dataTwo = temp.stream().mapToInt(i -> i).toArray();
        expectedResult = true;
        runPermutationTest(dataOne,dataTwo, expectedResult);

        // Add to Summary
        addToSummary("isPermutation()");

    }

    public static void testMostVowels() {


        // Setup
        resetTestRun();
        String[] data = {};
        int expectedResult = 0;
        System.out.println( newline + "********* VOWELS TESTS *********" + newline);

        // Test 1
        data = new String[] { "Cow", "Cat", "Dog"};
        expectedResult = 0;
        runVowelsTest(data, expectedResult);

        // Test 2
        data = new String[] { "Hello", null, "Hi", "Greetings"};
        expectedResult = 3;
        runVowelsTest(data, expectedResult);

        // Test 3
        data = new String[] { null, null, null, null, "jk"};
        expectedResult = 4;
        runVowelsTest(data, expectedResult);

        // Test 4
        data = new String[] { "aaaaaaa", "aieou" };
        expectedResult = 0;
        runVowelsTest(data, expectedResult);

        // Test 5
        data = new String[]  { "Staying", null, "", "moo", "SEqUOIA NAtIOnAl FOrEst",
                "!!!!>>+_)(*&^%$#@!>)))???\\///\n\n/n" };
        expectedResult = 4;
        runVowelsTest(data, expectedResult);

        // Test 6
        data = new String[]  { null, null, "100,000,000", "XXX", "",
                "!!!!>>+_)(*&^%$#@!>)))???\\///\n\n/n", null };
        expectedResult = 2;
        runVowelsTest(data, expectedResult);

        // Test 7
        data = new String[]  { null, null, null, null, "", "", null };
        expectedResult = 4;
        runVowelsTest(data, expectedResult);

        // Test 8
        data = new String[]  { "" };
        expectedResult = 0;
        runVowelsTest(data, expectedResult);

        // Test 9
        data = new String[] { null, "AIBA", "" };
        expectedResult = 1;
        runVowelsTest(data, expectedResult);

        // Test 10
        data = new String[] { "867", null, "45", "random" };
        expectedResult = 3;
        runVowelsTest(data, expectedResult);

        // Test 11
        data = new String[] { "cat", "mississippi", "56" };
        expectedResult = 1;
        runVowelsTest(data, expectedResult);

        // Test 12
        data = new String[] { "eureka", "BASEBALL BAT", "LONGHORN" };
        expectedResult = 0;
        runVowelsTest(data, expectedResult);

        // Test 13
        data = new String[] { null, "null", null, "null" };
        expectedResult = 1;
        runVowelsTest(data, expectedResult);

        // Test 14
        data = new String[] { "i", "really", "III", "like", "judo"};
        expectedResult = 2;
        runVowelsTest(data, expectedResult);

        // Test 15
        data = new String[] {"hmmm", "", "", "    ", " "};
        expectedResult = 0;
        runVowelsTest(data, expectedResult);

        // Test 16
        data = new String[] { "aaaaaaa", null, null, "a", null };
        expectedResult = 0;
        runVowelsTest(data, expectedResult);

        // Test 17
        data = new String[] { "a", null, "b", "c", "defghi", "", ""};
        expectedResult = 4;
        runVowelsTest(data, expectedResult);

        // Add to Summary
        addToSummary("mostVowels()");

    }

    public static void testSharedBirthdays() {


        // Setup
        resetTestRun();
        int dataPeople = 0;
        int dataDays = 0;
        int expectedResult = 0;
        System.out.println(newline + "********* BIRTHDAY TESTS *********" + newline);

        // Test 1
        dataPeople = 5;
        dataDays = 4;
        expectedResult = 0;
        runBirthdayTestGreaterThan(dataPeople, dataDays, expectedResult);

        // Test 2
        dataPeople = 14;
        dataDays = 1;
        expectedResult = 91;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 3
        dataPeople = 1;
        dataDays = 1;
        expectedResult = 0;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 4
        dataPeople = 1;
        dataDays = 365;
        expectedResult = 0;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 5
        dataPeople = 365;
        dataDays = 365;
        expectedResult = 0;
        runBirthdayTestGreaterThan(dataPeople, dataDays, expectedResult);

        // Test 6
        dataPeople = 2;
        dataDays = 1;
        expectedResult = 1;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 7
        dataPeople = 3;
        dataDays = 1;
        expectedResult = 3;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 8
        dataPeople = 4;
        dataDays = 1;
        expectedResult = 6;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 9
        dataPeople = 5;
        dataDays = 1;
        expectedResult = 10;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 10
        dataPeople = 100;
        dataDays = 1;
        expectedResult = 4950;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 11
        dataPeople = 100000;
        dataDays = 100;
        expectedResult = 0;
        runBirthdayTestGreaterThan(dataPeople, dataDays, expectedResult);

        // Test 12
        dataPeople = 100000;
        dataDays = 100000;
        expectedResult = 0;
        runBirthdayTestGreaterThan(dataPeople, dataDays, expectedResult);

        // Test 13
        dataPeople = 18;
        dataDays = 1;
        expectedResult = 153;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 14
        dataPeople = 1;
        dataDays = 5;
        expectedResult = 0;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 15
        dataPeople = 1;
        dataDays = 1000;
        expectedResult = 0;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Test 16
        dataPeople = 1000;
        dataDays = 1;
        expectedResult = 499500;
        runBirthdayTest(dataPeople, dataDays, expectedResult);

        // Add to Summary
        addToSummary("sharedBirthdays()");


    }

    public static void testQueensAreSafe() {


        // Setup
        resetTestRun();
        char[][] boardData = new char[0][0];
        boolean expectedResult = false;
        System.out.println(newline + "********* QUEEN TESTS *********" + newline);

        // Test 1
        boardData = new char[][] {
                { '.', '.', '.' },
                { '.', 'q', '.' },
                { '.', 'q', '.' }
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 2
        boardData = new char[][] {
                { '.', '.', '.' },
                { '.', '.', '.' },
                { '.', 'q', 'q' }
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 3
        boardData = new char[][] {
                { '.', '.', '.' },
                { '.', '.', '.' },
                { '.', '.', '.' }
        };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Test 4
        boardData = new char[][] {
                { '.', '.', '.' },
                { 'q', '.', '.' },
                { '.', '.', 'q' }
        };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Test 5
        boardData = new char[][] {
                { '.', '.', '.', 'q' },
                { '.', '.', '.', '.' },
                { '.', '.', '.', '.' },
                { 'q', '.', '.', '.' }
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 6
        boardData = new char[][] {
                { 'q', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', 'q', '.', '.' },
                { '.', 'q', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', 'q', '.' },
                { '.', '.', 'q', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', 'q' },
                { '.', '.', '.', 'q', '.', '.', '.' }
        };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Test 7
        boardData = new char[][] {
                { 'q', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', 'q', '.', '.', '.', '.', '.' },
                { '.', 'q', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', 'q', '.', '.', '.', '.' },
                { '.', '.', 'q', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', 'q', '.', '.', '.' },
                { '.', '.', '.', 'q', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', 'q', '.' },
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 8
        boardData = new char[][] {
                { '.', '.', '.', 'q', '.' },
                { '.', 'q', '.', '.', '.' },
                { '.', '.', '.', '.', 'q' },
                { '.', '.', '.', '.', '.' },
                { 'q', '.', '.', '.', '.' }
        };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Test 9
        boardData = new char[][] {
                { 'q', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', 'q', '.' },
                { '.', '.', '.', '.', 'q', '.', '.' },
                { '.', 'q', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', 'q', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', 'q' }
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 10
        boardData = new char[][] {
                { '.', 'q', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', 'q', '.', 'q' }
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 11
        boardData = new char[][] {
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', 'q', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.', '.', '.', 'q' }
        };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Test 12
        boardData = new char[][] { {'q'} };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Test 13
        boardData = new char[][] {
                {'q', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', 'q', '.', '.', '.'},
                {'.', 'q', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', 'q', '.', '.'},
                {'.', '.', 'q', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', 'q', '.'},
                {'.', '.', '.', 'q', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', 'q'}
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 14
        boardData = new char[][] {
                { '.', '.', 'q' },
                { 'q', '.', '.' },
                { '.', '.', 'q' }
        };
        expectedResult = false;
        runQueenTest(boardData, expectedResult);

        // Test 15
        boardData = new char[][] {
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' },
                { '.', '.', '.', '.', '.', '.', '.' }
        };
        expectedResult = true;
        runQueenTest(boardData, expectedResult);

        // Add to Summary
        addToSummary("queensAreSafe()");


    }

    public static void testMostValuablePlot() {


        // Setup
        resetTestRun();
        int[][] cityData = new int[0][0];
        int expectedResult = 0;
        System.out.println(newline + "********* PLOT TESTS *********" + newline);

        // Test 1
        cityData = new int[][] {
                {  -6,  -2, -7 },
                {  -5,   10, -6 },
                { -4,   -3, -4 }};
        expectedResult = 10;
        runPlotValueTest(cityData, expectedResult);

        // Test 2
        cityData = new int[][] {
                {  -6,  9, -7 },
                {  -5,   10, -6 },
                { -4,   -3, -4 }};
        expectedResult = 19;
        runPlotValueTest(cityData, expectedResult);

        // Test 3
        cityData = new int[][] {
                {  0,  -2, -7,  0, -1 },
                {  9,   2, -6,  2, 0 },
                { -4,   1, -4,  1, 0 },
                { -1,   8,  0, -2, 1 },
                { -10,  1,  1, -5, -6 },
                { -15, -1,  1,  5, 4 } };
        expectedResult = 15;
        runPlotValueTest(cityData, expectedResult);

        // Test 4
        cityData = new int[][] {
                {  0,  -2, -7,  0, -1 },
                {  9,   2, -6,  2, 0 },
                { -4,   1, -4,  1, 0 },
                { -1,   8,  0, -2, 1 },
                { -10,  6,  1, -5, -6 },
                { -15, -1,  1,  5, 4 } };
        expectedResult = 17;
        runPlotValueTest(cityData, expectedResult);

        // Test 5
        cityData = new int[][] { { 1 } };
        expectedResult = 1;
        runPlotValueTest(cityData, expectedResult);

        // Test 6
        cityData = new int[][] { { 1, 2, 3, 4, 5, 6, 7 } };
        expectedResult = 28;
        runPlotValueTest(cityData, expectedResult);

        // Test 7
        cityData = new int[][] {
                {-10, -10, -10, -5},
                {-15, -15, -10, -10},
                {-5, -10, -20, -5},
                {-5, -5, -10, -20 }};
        expectedResult = -5;
        runPlotValueTest(cityData, expectedResult);

        // Test 8
        cityData = new int[100][100];
        Random rand = new Random();
        for (int row = 0; row < cityData.length; row++) {
            for(int col = 0; col < cityData[row].length; col++) {
                cityData[row][col] = rand.nextInt(200) - 100;
            }
        }
        expectedResult = 0; // > 0
        runPlotValueTestGreaterThan(cityData, expectedResult);

        // Test 9
        cityData = new int[][] {
                { 0, 2, 13, 7 },
                { -5, 2, 0, 6 },
                { -7, 1, 5, 4 } };
        expectedResult = 40;
        runPlotValueTest(cityData, expectedResult);

        // Test 10
        cityData = new int[][] {
                { 5, 8, 3, -1 },
                { 7, 3, 6, -1 },
                { -1, 5, 8, -1 },
                { -2, 4, -1, -8 } };
        expectedResult = 45;
        runPlotValueTest(cityData, expectedResult);

        // Test 11
        cityData = new int[][] {
                { 5, 10 },
                { 15, -4000 } };
        expectedResult = 20;
        runPlotValueTest(cityData, expectedResult);

        // Test 12
        cityData = new int[][] {
                { 2, 4, 6, 8, 10, 12, 14 },
                { 40, 40, 40, -1000, 5, 6, 7 }};
        expectedResult = 132;
        runPlotValueTest(cityData, expectedResult);

        // Test 13
        cityData = new int[][] {
                {-1, -2, -3, -4},
                {-5, -6, -7, -8},
                {-9, -10, 0, -11},
                {-12, -13, -14, -15},
                {-16, -17, -18, -19}};
        expectedResult = 0;
        runPlotValueTest(cityData, expectedResult);

        // Test 14
        cityData = new int[][] {
                { 1, 1, 1 },
                { 1, 1, 1 },
                { 1, 1, 1 }};
        expectedResult = 9;
        runPlotValueTest(cityData, expectedResult);

        // Test 15
        cityData = new int[][] {
                {-1, 1, -1, 1},
                {-1, 1, -1, 1},
                {-1, 1, -1, 1} };
        expectedResult = 3;
        runPlotValueTest(cityData, expectedResult);

        // Add to Summary
        addToSummary("getMostValuablePlot()");

    }

    // *************************************************************************
    // *************************************************************************
    // ------------------------- DO NOT MESS WITH CODE BELOW -------------------
    // *************************************************************************
    // *************************************************************************

    static int currentTestRun = 0;
    static int passedTests = 0;
    static String failedTests = "[";
    static String fullTestSummary = "";
    static final String newline = System.getProperty("line.separator");
    static final InternalStopwatch stopwatch = new InternalStopwatch();

    // **** Test specific helpers
    public static void runHammingTest(int[] dataOne, int[] dataTwo, int expectedResult) {

        stopwatch.start();
        int actualResult = CodeCamp.hammingDistance(dataOne,dataTwo);
        stopwatch.stop();
        logTest(expectedResult, actualResult, stopwatch.time());
    }

    public static void runPermutationTest(int[] dataOne, int[] dataTwo, boolean expectedResult) {

        stopwatch.start();
        boolean actualResult = CodeCamp.isPermutation(dataOne, dataTwo);
        stopwatch.stop();
        logTest(expectedResult, actualResult, stopwatch.time());
    }

    public static void runVowelsTest(String[] data, int expectedResult) {

        stopwatch.start();
        int actualResult = CodeCamp.mostVowels(data);
        stopwatch.stop();
        logTest(expectedResult, actualResult, stopwatch.time());
    }

    public static void runBirthdayTest(int dataPeople, int dataDays, int expectedResult) {

        stopwatch.start();
        int actualResult = CodeCamp.sharedBirthdays(dataPeople, dataDays);
        stopwatch.stop();
        logTest(expectedResult, actualResult, stopwatch.time());
    }

    public static void runBirthdayTestGreaterThan(int dataPeople, int dataDays, int minimumResult) {

        stopwatch.start();
        int actualResult = CodeCamp.sharedBirthdays(dataPeople, dataDays);
        stopwatch.stop();
        logTestGreaterThan(minimumResult, actualResult, stopwatch.time());
    }

    public static void runQueenTest(char[][] boardData, boolean expectedResult) {

        stopwatch.start();
        boolean actualResult = CodeCamp.queensAreSafe(boardData);
        stopwatch.stop();
        logTest(expectedResult, actualResult, stopwatch.time());
    }

    public static void runPlotValueTest(int[][] cityData, int expectedResult) {

        stopwatch.start();
        int actualResult = CodeCamp.getValueOfMostValuablePlot(cityData);
        stopwatch.stop();
        logTest(expectedResult, actualResult, stopwatch.time());
    }

    public static void runPlotValueTestGreaterThan(int[][] cityData, int minimumValue) {

        stopwatch.start();
        int actualResult = CodeCamp.getValueOfMostValuablePlot(cityData);
        stopwatch.stop();
        logTestGreaterThan(minimumValue, actualResult, stopwatch.time());
    }

    // **** Abstract / General helpers
    public static <T> void logTest(T expectedResult, T actualResult, double elapsedTime) {

        currentTestRun++;
        boolean testFailed = false;

        if (expectedResult.equals(actualResult)) {

            // TEST PASSED
            if (fullOutput || summaryOnly == false) {
                System.out.println();
                System.out.println("[PASSED TEST " + currentTestRun + "]");
            }
            passedTests++;

        } else {

            // TEST FAILED
            testFailed = true;

            if (fullOutput || summaryOnly == false || smartOutput) {
                System.out.println();
                System.out.println("[!!! FAILED TEST " + currentTestRun + " !!!]");
            }

            failedTests = failedTests + currentTestRun + ",";

        }

        if (fullOutput || (testFailed && smartOutput)) {
            System.out.println("    Expected: " + expectedResult);
            System.out.println("    Actual: " + actualResult);
            System.out.println("    Time (seconds): " + String.format("%.5f",elapsedTime));
        }



    }

    public static void logTestGreaterThan(int minimumResult, int actualResult, double elapsedTime) {

        currentTestRun++;
        boolean testFailed = false;

        if (actualResult > minimumResult) {

            // TEST PASSED
            if (fullOutput || summaryOnly == false) {
                System.out.println();
                System.out.println("[PASSED TEST " + currentTestRun + "]");
            }
            passedTests++;

        } else {

            // TEST FAILED
            testFailed = true;

            if (fullOutput || summaryOnly == false || smartOutput) {
                System.out.println();
                System.out.println("[!!! FAILED TEST " + currentTestRun + " !!!]");
            }

            failedTests = failedTests + currentTestRun + ",";

        }

        if (fullOutput || (testFailed && smartOutput)) {
            System.out.println("    Expected greater than: " + minimumResult);
            System.out.println("    Actual: " + actualResult);
            System.out.println("    Time (seconds): " + String.format("%.5f",elapsedTime));
        }



    }

    public static void resetTestRun() {

        currentTestRun = 0;
        passedTests = 0;
        failedTests = "[";

    }

    public static void addToSummary(String testName) {

        fullTestSummary = fullTestSummary + newline + testName + ": " + passedTests + "/" + currentTestRun + "  " + failedTests + "]";

    }

    public static void printSummaryPage() {

        System.out.println(newline + "********* SUMMARY *********");
        System.out.println(fullTestSummary);

    }

    // ------------------------ Internal Stopwatch Class ----------------------

    /**
     A class to measure time elapsed. Provided in CS314 class.
     */

    public static class InternalStopwatch
    {
        private long startTime;
        private long stopTime;

        public static final double NANOS_PER_SEC = 1000000000.0;

        /**
         start the stop watch.
         */
        public void start(){
            startTime = System.nanoTime();
        }

        /**
         stop the stop watch.
         */
        public void stop()
        {	stopTime = System.nanoTime();	}

        /**
         elapsed time in seconds.
         @return the time recorded on the stopwatch in seconds
         */
        public double time()
        {	return (stopTime - startTime) / NANOS_PER_SEC;	}

        public String toString(){
            return "elapsed time: " + time() + " seconds.";
        }

        /**
         elapsed time in nanoseconds.
         @return the time recorded on the stopwatch in nanoseconds
         */
        public long timeInNanoseconds()
        {	return (stopTime - startTime);	}
    }


}
